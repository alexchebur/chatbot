# telegram_bot.py

import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from ocr_handler import process_images
from summary_handler import generate_summary
from evaluation_handler import evaluate_document

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
PHOTO, SUMMARY = range(2)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_keyboard = [
    ["üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ", "üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏"],
    ["‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", "‚ùì –ü–æ–º–æ—â—å"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return PHOTO  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        image_data = await photo_file.download_as_bytearray()
        
        # –í—ã–∑—ã–≤–∞–µ–º OCR
        text = process_images([image_data])  
        context.user_data["ocr_text"] = text
        
        await update.message.reply_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )
        return SUMMARY  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        return ConversationHandler.END

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
async def create_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "ocr_text" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")
        return PHOTO
        
    text = context.user_data["ocr_text"]
    summary = generate_summary(text)  # –í—ã–∑–æ–≤ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    context.user_data["summary"] = summary
    
    await update.message.reply_text(
        f"üìù –°–∞–º–º–∞—Ä–∏:\n\n{summary}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=markup
    )
    return SUMMARY

# –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞
async def evaluate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "summary" not in context.user_data:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏!")
        return SUMMARY
        
    evaluation = evaluate_document(
        context.user_data["ocr_text"],
        context.user_data["summary"]
    )
    await update.message.reply_text(
        f"‚öñÔ∏è –ü—Ä–∞–≤–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:\n\n{evaluation}", 
        reply_markup=markup
    )
    return ConversationHandler.END

# –ü–æ–º–æ—â—å
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""
    await update.message.reply_text(help_text, reply_markup=markup)
    return PHOTO  # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHOTO: [
                MessageHandler(filters.PHOTO, handle_photo),
                MessageHandler(filters.Regex(r"^‚ùì –ü–æ–º–æ—â—å$"), help_command),
                MessageHandler(filters.Regex(r"^üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏$"), 
                    lambda u, c: u.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!")),
                MessageHandler(filters.Regex(r"^‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç$"), 
                    lambda u, c: u.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏!"))
            ],
            SUMMARY: [
                MessageHandler(filters.Regex(r"^üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏$"), create_summary),
                MessageHandler(filters.Regex(r"^‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç$"), evaluate_text),
                MessageHandler(filters.Regex(r"^‚ùì –ü–æ–º–æ—â—å$"), help_command),
                MessageHandler(filters.PHOTO, handle_photo)
            ]
        },
        fallbacks=[CommandHandler("help", help_command)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
