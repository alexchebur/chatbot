# telegram_bot.py

import random
import aiohttp
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    MessageHandler,
    CommandHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from ocr_handler import process_images
from summary_handler import generate_summary
from evaluation_handler import evaluate_document

nest_asyncio.apply()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
PHOTO, SUMMARY = range(2)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = '7734922120:AAFT2qyYyjpCUUNna0EILRYET9a1ZmEcozI'
VSEGPT_API_KEY = 'sk-or-vv-a8d6e009e2bbe09474b0679fbba83b015ff1c4f255ed76f33b48ccb1632bdc32'
VSEGPT_API_URL = 'https://api.vsegpt.ru/v1/chat/completions'
MODEL_ID = 'anthropic/claude-3-haiku'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
reply_keyboard = [
    ["üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ", "üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏"],
    ["‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", "‚ùì –ü–æ–º–æ—â—å"]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    image_data = await photo_file.download_as_bytearray()
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        context.user_data['image'] = image_data
        # –í—ã–∑—ã–≤–∞–µ–º OCR –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        text = process_images([image_data])
        context.user_data['ocr_text'] = text
        await update.message.reply_text(
            f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:\n\n{text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
            reply_markup=markup
        )
        return SUMMARY
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}")
        return ConversationHandler.END

async def create_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'ocr_text' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        return
    
    text = context.user_data['ocr_text']
    summary = generate_summary(text)
    context.user_data['summary'] = summary
    
    await update.message.reply_text(
        f"–°–∞–º–º–∞—Ä–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n{summary}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

async def evaluate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'ocr_text' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
        return
    if 'summary' not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–∞–º–º–∞—Ä–∏")
        return
    
    evaluation = evaluate_document(
        context.user_data['ocr_text'],
        context.user_data['summary']
    )
    await update.message.reply_text(
        f"–ü—Ä–∞–≤–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:\n\n{evaluation}",
        reply_markup=markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ - —Å–æ–∑–¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç - –ø–æ–ª—É—á–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""
    await update.message.reply_text(help_text, reply_markup=markup)

def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, start)
        ],
        states={
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            SUMMARY: [
                MessageHandler(filters.Regex("^üìÑ –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏$"), create_summary),
                MessageHandler(filters.Regex("^‚öñÔ∏è –û—Ü–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç$"), evaluate_text)
            ]
        },
        fallbacks=[CommandHandler('help', help_command)]
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), help_command))
    application.add_handler(MessageHandler(filters.Regex("^üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ç–æ$"), lambda u,c: None))
    application.run_polling()

if __name__ == '__main__':
    main()
